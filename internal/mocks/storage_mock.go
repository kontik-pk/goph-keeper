// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	internal "github.com/kontik-pk/goph-keeper/internal"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Storage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCards provides a mock function with given fields: ctx, cardRequest
func (_m *Storage) DeleteCards(ctx context.Context, cardRequest internal.Card) error {
	ret := _m.Called(ctx, cardRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.Card) error); ok {
		r0 = rf(ctx, cardRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCredentials provides a mock function with given fields: ctx, credentialsRequest
func (_m *Storage) DeleteCredentials(ctx context.Context, credentialsRequest internal.Credentials) error {
	ret := _m.Called(ctx, credentialsRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.Credentials) error); ok {
		r0 = rf(ctx, credentialsRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNotes provides a mock function with given fields: ctx, noteRequest
func (_m *Storage) DeleteNotes(ctx context.Context, noteRequest internal.Note) error {
	ret := _m.Called(ctx, noteRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.Note) error); ok {
		r0 = rf(ctx, noteRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCard provides a mock function with given fields: ctx, cardRequest
func (_m *Storage) GetCard(ctx context.Context, cardRequest internal.Card) ([]internal.Card, error) {
	ret := _m.Called(ctx, cardRequest)

	var r0 []internal.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.Card) ([]internal.Card, error)); ok {
		return rf(ctx, cardRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, internal.Card) []internal.Card); ok {
		r0 = rf(ctx, cardRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, internal.Card) error); ok {
		r1 = rf(ctx, cardRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCredentials provides a mock function with given fields: ctx, credentialsRequest
func (_m *Storage) GetCredentials(ctx context.Context, credentialsRequest internal.Credentials) ([]internal.Credentials, error) {
	ret := _m.Called(ctx, credentialsRequest)

	var r0 []internal.Credentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.Credentials) ([]internal.Credentials, error)); ok {
		return rf(ctx, credentialsRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, internal.Credentials) []internal.Credentials); ok {
		r0 = rf(ctx, credentialsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Credentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, internal.Credentials) error); ok {
		r1 = rf(ctx, credentialsRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotes provides a mock function with given fields: ctx, noteRequest
func (_m *Storage) GetNotes(ctx context.Context, noteRequest internal.Note) ([]internal.Note, error) {
	ret := _m.Called(ctx, noteRequest)

	var r0 []internal.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.Note) ([]internal.Note, error)); ok {
		return rf(ctx, noteRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, internal.Note) []internal.Note); ok {
		r0 = rf(ctx, noteRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, internal.Note) error); ok {
		r1 = rf(ctx, noteRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, login, password
func (_m *Storage) Login(ctx context.Context, login string, password string) error {
	ret := _m.Called(ctx, login, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: ctx, login, password
func (_m *Storage) Register(ctx context.Context, login string, password string) error {
	ret := _m.Called(ctx, login, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCard provides a mock function with given fields: ctx, card
func (_m *Storage) SaveCard(ctx context.Context, card internal.Card) error {
	ret := _m.Called(ctx, card)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.Card) error); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCredentials provides a mock function with given fields: ctx, credentialsRequest
func (_m *Storage) SaveCredentials(ctx context.Context, credentialsRequest internal.Credentials) error {
	ret := _m.Called(ctx, credentialsRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.Credentials) error); ok {
		r0 = rf(ctx, credentialsRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveNote provides a mock function with given fields: ctx, note
func (_m *Storage) SaveNote(ctx context.Context, note internal.Note) error {
	ret := _m.Called(ctx, note)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.Note) error); ok {
		r0 = rf(ctx, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCredentials provides a mock function with given fields: ctx, credentials
func (_m *Storage) UpdateCredentials(ctx context.Context, credentials internal.Credentials) error {
	ret := _m.Called(ctx, credentials)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.Credentials) error); ok {
		r0 = rf(ctx, credentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNote provides a mock function with given fields: ctx, note
func (_m *Storage) UpdateNote(ctx context.Context, note internal.Note) error {
	ret := _m.Called(ctx, note)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.Note) error); ok {
		r0 = rf(ctx, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

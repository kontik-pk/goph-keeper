// Code generated by mockery. DO NOT EDIT.

package handler

import (
	internal "github.com/kontik-pk/goph-keeper/internal"
	mock "github.com/stretchr/testify/mock"
)

// mockStorage is an autogenerated mock type for the storage type
type mockStorage struct {
	mock.Mock
}

// DeleteCards provides a mock function with given fields: cardRequest
func (_m *mockStorage) DeleteCards(cardRequest internal.Card) error {
	ret := _m.Called(cardRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.Card) error); ok {
		r0 = rf(cardRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCredentials provides a mock function with given fields: credentialsRequest
func (_m *mockStorage) DeleteCredentials(credentialsRequest internal.Credentials) error {
	ret := _m.Called(credentialsRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.Credentials) error); ok {
		r0 = rf(credentialsRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNotes provides a mock function with given fields: noteRequest
func (_m *mockStorage) DeleteNotes(noteRequest internal.Note) error {
	ret := _m.Called(noteRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.Note) error); ok {
		r0 = rf(noteRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCard provides a mock function with given fields: cardRequest
func (_m *mockStorage) GetCard(cardRequest internal.Card) ([]internal.Card, error) {
	ret := _m.Called(cardRequest)

	var r0 []internal.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(internal.Card) ([]internal.Card, error)); ok {
		return rf(cardRequest)
	}
	if rf, ok := ret.Get(0).(func(internal.Card) []internal.Card); ok {
		r0 = rf(cardRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(internal.Card) error); ok {
		r1 = rf(cardRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCredentials provides a mock function with given fields: credentialsRequest
func (_m *mockStorage) GetCredentials(credentialsRequest internal.Credentials) ([]internal.Credentials, error) {
	ret := _m.Called(credentialsRequest)

	var r0 []internal.Credentials
	var r1 error
	if rf, ok := ret.Get(0).(func(internal.Credentials) ([]internal.Credentials, error)); ok {
		return rf(credentialsRequest)
	}
	if rf, ok := ret.Get(0).(func(internal.Credentials) []internal.Credentials); ok {
		r0 = rf(credentialsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Credentials)
		}
	}

	if rf, ok := ret.Get(1).(func(internal.Credentials) error); ok {
		r1 = rf(credentialsRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotes provides a mock function with given fields: noteRequest
func (_m *mockStorage) GetNotes(noteRequest internal.Note) ([]internal.Note, error) {
	ret := _m.Called(noteRequest)

	var r0 []internal.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(internal.Note) ([]internal.Note, error)); ok {
		return rf(noteRequest)
	}
	if rf, ok := ret.Get(0).(func(internal.Note) []internal.Note); ok {
		r0 = rf(noteRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(internal.Note) error); ok {
		r1 = rf(noteRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: login, password
func (_m *mockStorage) Login(login string, password string) error {
	ret := _m.Called(login, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(login, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: login, password
func (_m *mockStorage) Register(login string, password string) error {
	ret := _m.Called(login, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(login, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCard provides a mock function with given fields: card
func (_m *mockStorage) SaveCard(card internal.Card) error {
	ret := _m.Called(card)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.Card) error); ok {
		r0 = rf(card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCredentials provides a mock function with given fields: credentialsRequest
func (_m *mockStorage) SaveCredentials(credentialsRequest internal.Credentials) error {
	ret := _m.Called(credentialsRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.Credentials) error); ok {
		r0 = rf(credentialsRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveNote provides a mock function with given fields: note
func (_m *mockStorage) SaveNote(note internal.Note) error {
	ret := _m.Called(note)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.Note) error); ok {
		r0 = rf(note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCredentials provides a mock function with given fields: credentials
func (_m *mockStorage) UpdateCredentials(credentials internal.Credentials) error {
	ret := _m.Called(credentials)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.Credentials) error); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNote provides a mock function with given fields: note
func (_m *mockStorage) UpdateNote(note internal.Note) error {
	ret := _m.Called(note)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.Note) error); ok {
		r0 = rf(note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewMockStorage interface {
	mock.TestingT
	Cleanup(func())
}

// newMockStorage creates a new instance of mockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockStorage(t mockConstructorTestingTnewMockStorage) *mockStorage {
	mock := &mockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
